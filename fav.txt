<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <title>Rat Games</title>
  <link rel="icon" href="/media/favicon.png" type="image/png" />
  <style>
    :root{
      --accent: #b36b2d;
      --search-height: 64px;
      --search-font-size: 20px;
      --search-width-desktop: 80%;
      --search-width-mobile: 95%;
      --pulse-duration: 1600ms;
    }

    html,body{height:100%;margin:0;padding:0;}
    body{
      font-family: 'Comic Sans MS', sans-serif;
      background: url('https://cty3ctyc42yjmxt3499ctn924u9xaje5y.vercel.app/media/rat-spinning.gif') no-repeat center center fixed;
      background-size: cover;
      background-color: #121212;
      color:#fff;
    }

    .container{
      width:90%;
      max-width:1100px;
      margin:32px auto;
      padding:36px 24px;
      text-align:center;
      background:rgba(18,18,18,0.88);
      border-radius:12px;
      box-shadow:0 10px 30px rgba(0,0,0,0.6);
    }
    h1{margin:0 0 20px 0;font-size:34px;}
    .search-area{display:flex;flex-direction:column;align-items:center;gap:10px;margin:18px 0 26px;}
    .search-label{display:flex;align-items:center;gap:8px;font-weight:700;font-size:18px;color:var(--accent);text-shadow:0 2px 8px rgba(0,0,0,0.6);}
    .search-wrapper{position:relative;width:var(--search-width-desktop);max-width:980px;transition:transform .18s ease;}
    .search-wrapper .icon{position:absolute;left:14px;top:50%;transform:translateY(-50%);pointer-events:none;font-size:20px;opacity:.95;}
    input.search-input{
      width:100%;
      height:var(--search-height);
      padding-left:54px;padding-right:18px;
      font-size:var(--search-font-size);
      border-radius:14px;border:2px solid rgba(255,255,255,0.06);
      background:linear-gradient(180deg, rgba(30,30,30,0.95), rgba(18,18,18,0.85));
      color:#fff;outline:none;box-shadow:0 6px 20px rgba(0,0,0,0.6);
      transition:box-shadow .18s ease,transform .12s ease,border-color .12s ease;
    }
    input.search-input::placeholder{color:#d0d6db;opacity:.9;font-weight:600;}
    input.search-input:focus,input.search-input:hover{
      transform:translateY(-3px);border-color:var(--accent);
      box-shadow:0 8px 30px rgba(0,0,0,0.7),0 0 28px 3px rgba(179,107,45,0.06);
    }
    input.search-input:focus{
      box-shadow:0 10px 40px rgba(0,0,0,0.7),0 0 40px 8px rgba(179,107,45,0.08);
    }

    @keyframes pulseGlow{
      0% { box-shadow: 0 6px 20px rgba(0,0,0,0.6), 0 0 0px rgba(179,107,45,0); }
      50% { box-shadow: 0 12px 36px rgba(0,0,0,0.65), 0 0 36px rgba(179,107,45,0.12); transform:translateY(-1px); }
      100% { box-shadow: 0 6px 20px rgba(0,0,0,0.6), 0 0 0px rgba(179,107,45,0); transform:translateY(0); }
    }
    .pulse-once{ animation: pulseGlow var(--pulse-duration) ease-in-out 1; }

    .search-hint{font-size:12px;color:#cfd8dc;opacity:.85;}
    .button-container{display:flex;flex-wrap:wrap;justify-content:space-between;gap:20px;margin-top:18px;}
    .btn{width:48%;padding:15px;border-radius:8px;border:none;background:#333;color:#fff;cursor:pointer;font-weight:600;transition:background .25s,transform .12s;text-align:center;}
    .btn:hover{background:#555;transform:translateY(-3px);}

    @media (max-width:900px){ .search-wrapper{width:var(--search-width-mobile);} .btn{width:100%} }
    @media (max-width:420px){ :root{--search-height:56px;--search-font-size:18px;} h1{font-size:28px;} }
  </style>
</head>
<body>
  <div class="container">
    <h1>Youtube Playables</h1>

    <div class="search-area">
      <div class="search-label" aria-hidden="true">
        <svg width="18" height="18" viewBox="0 0 24 24" fill="none" aria-hidden="true" focusable="false">
          <path d="M21 21l-4.35-4.35" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
          <circle cx="11" cy="11" r="6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></circle>
        </svg>
        <span id="label-text">Find a game</span>
      </div>

      <div class="search-wrapper" id="search-wrapper">
        <div class="icon" aria-hidden="true">ðŸ”Ž</div>
        <input type="search" id="search" class="search-input" aria-label="Search games" autocomplete="off">
      </div>

      <div class="search-hint">Tip: press the <kbd>/</kbd> key to jump to search</div>
    </div>

    <div class="button-container" id="game-buttons"></div>
  </div>

  <script type="module">
    import Fuse from 'https://cdn.jsdelivr.net/npm/fuse.js@6.6.2/+esm';

    /* ALL 70 entries - every URL uses the TXT: prefix so the button opens a Blob
       that fetches the .txt hosted at https://4texas4.github.io/youtube-playables/<filename>
    */
    const gameList = `
hill-climb-racing-lite, TXT:hill-climb-racing-lite.txt
magic-tiles-3, TXT:magic-tiles-3.txt
pou, TXT:pou.txt
    `;

    // parse robustly into {name, url}
    const games = gameList
      .trim()
      .split('\n')
      .map(line => {
        const parts = line.split(',');
        if (!parts || parts.length < 2) return null;
        const name = parts.shift().trim();
        const url = parts.join(',').trim();
        if (!name || !url) return null;
        return { name, url };
      })
      .filter(Boolean);

    // Keep original order (no other legacy logic)
    const finalGames = games;

    // populate search placeholder and label
    const searchInput = document.getElementById('search');
    searchInput.placeholder = `Search through ${finalGames.length} games`;

    // container + button map
    const container = document.getElementById('game-buttons');
    const buttonMap = new Map();

    // function that opens a blob which fetches & document.write()s the .txt content
    function openTxtBlob(filename) {
      const fetchPath = `https://4texas4.github.io/youtube-playables/${encodeURIComponent(filename)}`;
      const code = `<script>fetch('${fetchPath}').then(r=>r.text()).then(t=>{document.open();document.write(t);document.close();}).catch(e=>console.error(e));<\/script>`;
      const blob = new Blob([code], { type: 'text/html' });
      const url = URL.createObjectURL(blob);
      window.open(url, '_blank');
      // we intentionally do not revoke here because the new tab needs it; browser will clean up later
    }

    // create buttons (all use TXT blob logic)
    finalGames.forEach(({name, url}) => {
      const btn = document.createElement('button');
      btn.className = 'btn';
      btn.textContent = name;

      if (url.startsWith('TXT:')) {
        const filename = url.slice(4);
        btn.onclick = () => openTxtBlob(filename);
      } else {
        // fallback (shouldn't happen) â€” treat as TXT if not prefixed
        btn.onclick = () => openTxtBlob(url);
      }

      container.appendChild(btn);
      buttonMap.set(name, btn);
    });

    // fuzzy search setup
    const fuse = new Fuse(finalGames, { keys:['name'], threshold:0.35 });

    searchInput.addEventListener('input', (e) => {
      const q = e.target.value.trim();
      const results = q ? fuse.search(q).map(r => r.item.name) : finalGames.map(g => g.name);
      const showSet = new Set(results);
      buttonMap.forEach((btn, name) => btn.style.display = showSet.has(name) ? '' : 'none');
    });

    // focus shortcut for search
    document.addEventListener('keydown', (e) => {
      if (e.key === '/' && document.activeElement !== searchInput) {
        e.preventDefault();
        searchInput.focus();
        searchInput.select();
      }
    });

    // small pulse on load
    const wrapper = document.getElementById('search-wrapper');
    wrapper.classList.add('pulse-once');
    setTimeout(()=> wrapper.classList.remove('pulse-once'), 1700);

    // optional: prefill ?q=
    const params = new URLSearchParams(location.search);
    if (params.get('q')) {
      searchInput.value = params.get('q');
      searchInput.dispatchEvent(new Event('input'));
      searchInput.focus();
    }

    // show count in label
    const labelText = document.getElementById('label-text');
    labelText.textContent = `Find a game â€” ${finalGames.length} available`;
  </script>
</body>
</html>
